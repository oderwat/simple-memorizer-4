name: Build and Deploy to GKE

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  IMAGE: simple-memorizer-4
  GKE_CLUSTER: gke-cluster
  GKE_ZONE: us-east1
  DEPLOYMENT_NAME: sm-4-app # TODO: update if changed in k8s/deployment.yaml

jobs:
  build-and-deploy-to-gke:
    name: Build and Deploy to GKE
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Authenticate to Google Cloud
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Build the Docker image
      - name: Build
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" .

      # Configure Docker to use the gcloud command-line tool as a credential helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker          

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"      

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Get the GKE credentials, so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
          gcloud components install gke-gcloud-auth-plugin

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          cd k8s
          ../kustomize edit set image gcr.io/project/image=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ../kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
